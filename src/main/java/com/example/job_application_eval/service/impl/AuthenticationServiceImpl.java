package com.example.job_application_eval.service.impl;

import com.example.job_application_eval.dtos.LoginUserDto;
import com.example.job_application_eval.entities.UserEntity;
import com.example.job_application_eval.entities.enums.Role;
import com.example.job_application_eval.repository.UserRepository;
import com.example.job_application_eval.responses.LogInResponse;
import com.example.job_application_eval.service.AuthenticationService;
import com.example.job_application_eval.service.JwtService;
import jakarta.mail.MessagingException;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;
import java.security.SecureRandom;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class AuthenticationServiceImpl implements AuthenticationService {
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final AuthenticationManager authenticationManager;
    private final EmailServiceImpl emailServiceImpl;
    private final JwtService jwtService;

    @Override
    public UserEntity signup(UserEntity input) {
        Optional<UserEntity> existingUserName = userRepository.findByUsername(input.getUsername());
        Optional<UserEntity> existingEmail = userRepository.findByEmail(input.getEmail());

        if (existingUserName.isPresent()) {
            throw new ResponseStatusException(
                    HttpStatus.CONFLICT,
                    "usernameExists"
            );
        }

        if (existingEmail.isPresent()) {
            throw new ResponseStatusException(
                    HttpStatus.CONFLICT,
                    "emailExists"
            );
        }

        String rawTemporaryPassword = generateTemporaryPassword();
        String hashedTemporaryPassword = passwordEncoder.encode(rawTemporaryPassword);

        UserEntity user = UserEntity.builder()
                .email(input.getEmail())
                .username(input.getUsername())
                .password(hashedTemporaryPassword)
                .lastname(input.getLastname())
                .firstname(input.getFirstname())
                .gender(input.getGender())
                .birthdate(input.getBirthdate())
                .fullName(input.getFirstname() + " " + input.getLastname())
                .role(Role.USER)
                .autoGeneratedPasswordExpiresAt(LocalDateTime.now().plusMinutes(15))
                .passwordChanged(false)
                .build();

        sendVerificationEmail(user, rawTemporaryPassword);
        return userRepository.save(user);
    }

    @Override
    public LogInResponse authenticate(LoginUserDto input) {

        UserEntity user = userRepository.findByUsername(input.getUsername())
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "userNotFound"));

        if (!user.isPasswordChanged()) {
            if (user.getAutoGeneratedPasswordExpiresAt().plusMinutes(10).isBefore(LocalDateTime.now())) {
                throw new ResponseStatusException(HttpStatus.FORBIDDEN, "autoGeneratedPasswordExpired");
            }
        }

        try {
            authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(
                            input.getUsername(),
                            input.getPassword()
                    )
            );
        } catch (BadCredentialsException ex) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "invalidUsernameOrPassword");
        }

        UserDetails userDetails = org.springframework.security.core.userdetails.User
                .withUsername(user.getUsername())
                .password(user.getPassword())
                .authorities("ROLE_" + user.getRole().name())
                .build();

        Map<String, Object> extraClaims = new HashMap<>();
        extraClaims.put("role", user.getRole().name());
        extraClaims.put("userId", user.getUserId());

        String token = jwtService.generateToken(extraClaims, userDetails);
        long expiresIn = jwtService.getExpirationTime();

        String refreshToken = jwtService.generateRefreshToken(userDetails);

        String role = user.getRole().name();

        return new LogInResponse(user.getUserId(), token, refreshToken, expiresIn, role, user.isPasswordChanged());
    }

    @Override
    public void resendAutoGeneratedPassword(String username) {
        Optional<UserEntity> optionalUser = userRepository.findByUsername(username);
        if (optionalUser.isEmpty()) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "userNotFound");
        }
            UserEntity user = optionalUser.get();
            String rawVerificationCode = generateTemporaryPassword();
            String hashedCode = passwordEncoder.encode(rawVerificationCode);
            user.setPassword(hashedCode);
            user.setAutoGeneratedPasswordExpiresAt(LocalDateTime.now().plusHours(1));
            sendVerificationEmail(user, rawVerificationCode);
            userRepository.save(user);
    }


    public void sendVerificationEmail(UserEntity user, String rawVerificationCode) {
        String fullName = user.getFirstname() + " " + user.getLastname();
        String subject = "Welcome to CodePioneers";

        LocalDateTime expirationTime = user.getAutoGeneratedPasswordExpiresAt();
        String formattedExpiration = expirationTime.format(DateTimeFormatter.ofPattern("MMMM dd, yyyy HH:mm"));

        String role = String.valueOf(user.getRole());
        String htmlMessage;


        String baseLayoutStart = "<html><body style=\"font-family: Arial, sans-serif; background-color: #F9FAFB; padding: 20px;\">"
                + "<div style=\"max-width: 600px; margin: auto; background-color: #ffffff; padding: 30px; border-radius: 8px; box-shadow: 0 0 10px rgba(0,0,0,0.05);\">"
                + "<h2 style=\"color: #4F46E5;\">Welcome to <strong>CodePioneers</strong></h2>"
                + "<p style=\"font-size: 16px; color: #000000;\">Dear " + fullName + ",</p>";

        String baseLayoutEnd = "<p style=\"font-size: 14px; color: #777; margin-top: 40px;\">If you need help, feel free to contact our support team.</p>"
                + "<p style=\"font-size: 14px; color: #777;\">Sincerely,<br>The CodePioneers Team</p>"
                + "</div></body></html>";

        if ("USER".equalsIgnoreCase(role)) {
            htmlMessage = baseLayoutStart
                    + "<p style=\"font-size: 16px; color: #000000;\">Your account has been created. Please use the temporary password below to log in:</p>"
                    + "<div style=\"background-color: #F9FAFB; padding: 20px; border-radius: 5px; margin-bottom: 20px;\">"
                    + "<p style=\"font-size: 16px; color: #000000;\"><strong>Temporary Password:</strong> "
                    + "<span style=\"font-weight: bold; color: #4F46E5;\">" + rawVerificationCode + "</span></p>"
                    + "</div>"
                    + "<p style=\"font-size: 16px; color: #000000;\">This password is valid until <strong>" + formattedExpiration + "</strong>.</p>"
                    + "<p style=\"font-size: 16px; color: #000000;\">Please change your password immediately after your first login for security purposes.</p>"
                    + baseLayoutEnd;
        } else {
            htmlMessage = baseLayoutStart
                    + "<p style=\"font-size: 16px; color: #000000;\">Your account has been successfully created. Below are your credentials:</p>"
                    + "<div style=\"background-color: #F9FAFB; padding: 20px; border-radius: 5px; margin-bottom: 20px;\">"
                    + "<p style=\"font-size: 16px; color: #000000;\"><strong>Username:</strong> "
                    + "<span style=\"font-weight: bold; color: #000000;\">" + user.getUsername() + "</span></p>"
                    + "<p style=\"font-size: 16px; color: #000000;\"><strong>Temporary Password:</strong> "
                    + "<span style=\"font-weight: bold; color: #4F46E5;\">" + rawVerificationCode + "</span></p>"
                    + "</div>"
                    + "<p style=\"font-size: 16px; color: #000000;\">This password is valid until <strong>" + formattedExpiration + "</strong>.</p>"
                    + "<p style=\"font-size: 16px; color: #000000;\">Please change your password immediately after your first login for security purposes.</p>"
                    + baseLayoutEnd;
        }

        try {
            emailServiceImpl.sendEmail(user.getEmail(), subject, htmlMessage);
        } catch (MessagingException e) {
            e.printStackTrace(); // optionally log this
        }
    }



    public String generateTemporaryPassword() {
        String chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*";
        SecureRandom random = new SecureRandom();
        StringBuilder sb = new StringBuilder(10);
        for (int i = 0; i < 10; i++) {
            sb.append(chars.charAt(random.nextInt(chars.length())));
        }
        return sb.toString();
    }


    @Override
    public LogInResponse refreshAccessToken(String refreshToken) {
        if (!jwtService.validateRefreshToken(refreshToken)) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "jwtExpired");
        }

        String username = jwtService.extractUsername(refreshToken);
        UserEntity user = userRepository.findByUsername(username)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found"));


        UserDetails userDetails = org.springframework.security.core.userdetails.User
                .withUsername(user.getUsername())
                .password(user.getPassword())
                .authorities("ROLE_" + user.getRole().name())
                .build();

        String newAccessToken = jwtService.generateToken(userDetails);
        long newExpiresIn = jwtService.getExpirationTime();

        return new LogInResponse(user.getUserId(),newAccessToken, refreshToken, newExpiresIn, user.getRole().name(), user.isPasswordChanged());
    }
}