package com.example.job_application_eval.service.impl;


import com.example.job_application_eval.dtos.LoginUserDto;
import com.example.job_application_eval.dtos.RegisterUserDto;
import com.example.job_application_eval.dtos.UserDto;
import com.example.job_application_eval.entities.UserEntity;
import com.example.job_application_eval.entities.enums.Role;
import com.example.job_application_eval.repository.UserRepository;
import com.example.job_application_eval.responses.LogInResponse;
import com.example.job_application_eval.service.AuthenticationService;
import com.example.job_application_eval.service.JwtService;
import jakarta.mail.MessagingException;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;
import java.security.SecureRandom;
import java.time.LocalDateTime;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class AuthenticationServiceImpl implements AuthenticationService {
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final AuthenticationManager authenticationManager;
    private final EmailServiceImpl emailServiceImpl;
    private final JwtService jwtService;

    @Override
    public UserEntity signup(UserEntity input) {
        Optional<UserEntity> existingUserName = userRepository.findByUsername(input.getUsername());
        Optional<UserEntity> existingEmail = userRepository.findByUsername(input.getUsername());

        if (existingUserName.isPresent()) {
            throw new ResponseStatusException(
                    HttpStatus.CONFLICT,
                    "This username is already taken. Please choose a different username."
            );
        }

        if (existingEmail.isPresent()) {
            throw new ResponseStatusException(
                    HttpStatus.CONFLICT,
                    "This email is already used. Please choose a different email."
            );
        }

        String rawTemporaryPassword = generateTemporaryPassword();
        String hashedTemporaryPassword = passwordEncoder.encode(rawTemporaryPassword);

        UserEntity user = UserEntity.builder()
                .email(input.getEmail())
                .username(input.getUsername())
                .password(hashedTemporaryPassword)
                .lastname(input.getLastname())
                .firstname(input.getFirstname())
                .gender(input.getGender())
                .birthdate(input.getBirthdate())
                .fullName(input.getFirstname() + " " + input.getLastname())
                .role(Role.USER)
                .autoGeneratedPasswordExpiresAt(LocalDateTime.now().plusMinutes(15))
                .passwordChanged(false)
                .build();

        sendVerificationEmail(user, rawTemporaryPassword);
        return userRepository.save(user);
    }

    @Override
    public LogInResponse authenticate(LoginUserDto input) {
        UserEntity user = userRepository.findByUsername(input.getUsername())
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "userNotFound"));

        if (!user.isPasswordChanged()) {
            if (user.getAutoGeneratedPasswordExpiresAt().plusMinutes(10).isBefore(LocalDateTime.now())) {
                throw new ResponseStatusException(HttpStatus.FORBIDDEN, "autoGeneratedPasswordExpired");
            }
        }

        authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(
                        input.getUsername(),
                        input.getPassword()
                )
        );

        UserDetails userDetails = org.springframework.security.core.userdetails.User
                .withUsername(user.getUsername())
                .password(user.getPassword())
                .authorities("ROLE_" + user.getRole().name())
                .build();

        String token = jwtService.generateToken(userDetails);
        long expiresIn = jwtService.getExpirationTime();
        String role = user.getRole().name();

        return new LogInResponse(token, expiresIn, role);
    }

    @Override
    public void resendAutoGeneratedPassword(String username) {
        Optional<UserEntity> optionalUser = userRepository.findByUsername(username);
        if (optionalUser.isEmpty()) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "userNotFound");
        }
            UserEntity user = optionalUser.get();
            String rawVerificationCode = generateTemporaryPassword();
            String hashedCode = passwordEncoder.encode(rawVerificationCode);
            user.setPassword(hashedCode);
            user.setAutoGeneratedPasswordExpiresAt(LocalDateTime.now().plusHours(1));
            sendVerificationEmail(user, rawVerificationCode);
            userRepository.save(user);
    }


    public void sendVerificationEmail(UserEntity user, String rawVerificationCode) {

        String fullName = user.getFirstname() + " " + user.getLastname();
        String subject = "Your Account Credentials";

        String htmlMessage = "<html>"
                + "<body style=\"font-family: Arial, sans-serif;\">"
                + "<div style=\"background-color: #f5f5f5; padding: 20px;\">"
                + "<h2 style=\"color: #333;\">Welcome to Our Platform</h2>"
                + "<p style=\"font-size: 16px;\">Dear " + fullName + ",</p>"
                + "<p style=\"font-size: 16px;\">Your account has been successfully created. Please find your temporary password below:</p>"
                + "<div style=\"background-color: #fff; padding: 20px; border-radius: 5px; "
                + "box-shadow: 0 0 10px rgba(0,0,0,0.1); margin-bottom: 20px;\">"
                + "<p style=\"font-size: 16px;\"><strong>Temporary Password:</strong> "
                + "<span style=\"font-weight: bold; color: #007bff;\">" + rawVerificationCode + "</span></p>"
                + "</div>"
                + "<p style=\"font-size: 16px;\">Please use this password to log in and complete your account verification. "
                + "For security reasons, we strongly recommend changing your password immediately after your first login.</p>"
                + "<p style=\"font-size: 14px; color: #777;\">If you have any questions or need assistance, feel free to contact our support team.</p>"
                + "<p style=\"font-size: 14px; color: #777;\">Sincerely,<br>X-Company Team</p>"
                + "</div>"
                + "</body>"
                + "</html>";

        try {
            emailServiceImpl.sendVerificationEmail(user.getEmail(), subject, htmlMessage);
        } catch (MessagingException e) {
            e.printStackTrace();
        }
    }

    public String generateTemporaryPassword() {
        String chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*";
        SecureRandom random = new SecureRandom();
        StringBuilder sb = new StringBuilder(10);
        for (int i = 0; i < 10; i++) {
            sb.append(chars.charAt(random.nextInt(chars.length())));
        }
        return sb.toString();
    }
}