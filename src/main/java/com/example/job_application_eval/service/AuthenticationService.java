package com.example.job_application_eval.service;


import com.example.job_application_eval.dto.LoginUserDto;
import com.example.job_application_eval.dto.RegisterUserDto;
import com.example.job_application_eval.entities.UserEntity;
import com.example.job_application_eval.repository.UserRepository;
import jakarta.mail.MessagingException;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

import java.time.LocalDateTime;
import java.util.Optional;
import java.util.Random;

@Service
@RequiredArgsConstructor
public class AuthenticationService {
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final AuthenticationManager authenticationManager;
    private final EmailService emailService;


    public UserEntity signup(RegisterUserDto input) {
        String rawVerificationCode = generateVerificationCode();
        String hashedCode = passwordEncoder.encode(rawVerificationCode);

        UserEntity user = UserEntity.builder()
                .email(input.getEmail())
                .password(hashedCode)
                .lastname(input.getLastname())
                .firstname(input.getFirstname())
                .gender(input.getGender())
                .birthdate(input.getBirthdate())
                .fullName(input.getFirstname() + " " + input.getLastname())
                .role(input.getRole())
                .autoGeneratedPasswordExpiresAt(LocalDateTime.now().plusMinutes(15))
                .passwordChanged(false)
                .build();

        sendVerificationEmail(user, rawVerificationCode);
        return userRepository.save(user);
    }

    public UserEntity authenticate(LoginUserDto input) {
        UserEntity user = userRepository.findByEmail(input.getEmail())
                .orElseThrow(() -> new RuntimeException("userNotFound"));

        if (!user.isPasswordChanged()) {
            if (user.getAutoGeneratedPasswordExpiresAt().plusMinutes(10).isBefore(LocalDateTime.now())) {
                throw new ResponseStatusException(HttpStatus.FORBIDDEN, "autoGeneratedPasswordExpired");
            }
        }

        authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(
                        input.getEmail(),
                        input.getPassword()
                )
        );
        return user;
    }


    public void resendVerificationCode(String email) {
        Optional<UserEntity> optionalUser = userRepository.findByEmail(email);
        if (optionalUser.isEmpty()) {
            throw new RuntimeException("userNotFound");
        }
            UserEntity user = optionalUser.get();
            String rawVerificationCode = generateVerificationCode();
            String hashedCode = passwordEncoder.encode(rawVerificationCode);
            user.setPassword(hashedCode);
            user.setAutoGeneratedPasswordExpiresAt(LocalDateTime.now().plusHours(1));
            sendVerificationEmail(user, rawVerificationCode);
            userRepository.save(user);
    }

    private void sendVerificationEmail(UserEntity user, String rawVerificationCode) {
        String subject = "Account Verification";
        String htmlMessage = "<html>"
                + "<body style=\"font-family: Arial, sans-serif;\">"
                + "<div style=\"background-color: #f5f5f5; padding: 20px;\">"
                + "<h2 style=\"color: #333;\">Welcome to our app!</h2>"
                + "<p style=\"font-size: 16px;\">Below is your auto-generated password:</p>"
                + "<div style=\"background-color: #fff; padding: 20px; border-radius: 5px; "
                + "box-shadow: 0 0 10px rgba(0,0,0,0.1); margin-bottom: 20px;\">"
                + "<h3 style=\"color: #333;\">Auto-Generated Password:</h3>"
                + "<p style=\"font-size: 18px; font-weight: bold; color: #007bff;\">"
                + rawVerificationCode + "</p>"
                + "</div>"
                + "<p style=\"font-size: 16px;\">Please use this password to log in after verification, and make sure to change it immediately.</p>"
                + "<p style=\"font-size: 14px; color: #777;\">This email was sent by X-Company.</p>"
                + "</div>"
                + "</body>"
                + "</html>";


        try {
            emailService.sendVerificationEmail(user.getEmail(), subject, htmlMessage);
        } catch (MessagingException e) {
            e.printStackTrace();
        }
    }
    private String generateVerificationCode() {
        Random random = new Random();
        int code = random.nextInt(900000) + 100000;
        return String.valueOf(code);
    }
}